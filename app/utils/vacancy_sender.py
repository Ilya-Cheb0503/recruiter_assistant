from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from app.database.models import Vacancy

VACANCIES_PER_PAGE = 5

def get_vacancy_keyboard(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data="respond_direct"),
        ],
        [
            InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ HH", callback_data=f"go_to_site|{url}")
        ]
    ])


def get_pagination_keyboard(current: int, total: int, category: str) -> InlineKeyboardMarkup:
    buttons = []

    if current < total:
        buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"vacancies_{category}_{current}")])

    buttons.append([InlineKeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)



async def send_vacancy_batch(
    message: Message | CallbackQuery,
    vacancies: list[Vacancy],
    start_index: int = 0,
    category: str = "all"
) -> None:
    if not vacancies:
        await message.answer(
            "–ï—Å–ª–∏ –≤—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É¬ª.\n"
            "–° –í–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è."
            )
        return

    batch = vacancies[start_index:start_index + VACANCIES_PER_PAGE]
    total = len(vacancies)

    for v in batch:
        text = (
            f"üìå <b>{v.title}</b>\n"
            f"üè¢ {v.company or '-'}\n"
            f"üìç {v.region or '-'}\n"
            f"üí∞ {v.salary_from or '–æ—Ç ‚Äî'} ‚Äî {v.salary_to or '–¥–æ ‚Äî'}\n\n"
            f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n{v.requirements or '‚Äî'}\n\n"
            f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n{v.responsibilities or '‚Äî'}"
        )
        await message.answer(text, reply_markup=get_vacancy_keyboard(v.url), parse_mode="HTML")

    viewed = start_index + len(batch)
    text = (
        f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total}\n"
        f"–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ {viewed} –∏–∑ –Ω–∏—Ö"
    )

    if viewed < total:
        text += "\n–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è?"
    else:
        text += "\n–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏."

    await message.answer(
        text,
        reply_markup=get_pagination_keyboard(viewed, total, category=category)
    )


def get_redirect_keyboard(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data="respond_direct"),
        ],
        [
            InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ HH", url=url)
        ]
    ])