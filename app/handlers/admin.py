from datetime import datetime, timedelta
import asyncio

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.inline.menu import get_admin_dashboard
from sqlalchemy import distinct, func, select

from app.config import load_config
from app.database.models import Metric
from app.database.session import async_session
from app.services.static_content import load_content, save_content
from app.states.state_user_form import FormStates



router = Router()
config = load_config()
admin_ids = list(map(int, config['ADMINS'].split(',')))



@router.callback_query(F.data == 'admin_panel')
async def admin_panel_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_dashboard())


@router.callback_query(F.data == 'send_broadcast')
async def admin_panel_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=get_admin_dashboard())


@router.callback_query(F.data == 'metrics')
async def admin_panel_handler(callback: CallbackQuery):
    await callback.answer()
    if callback.from_user.id not in admin_ids:
        return await callback.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå')

    one_month_ago = datetime.utcnow() - timedelta(days=30)

    async with async_session() as session:
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        result = await session.execute(
            select(func.count(distinct(Metric.user_id))).where(Metric.timestamp >= one_month_ago)
        )
        unique_users = result.scalar()

        # –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è
        result = await session.execute(
            select(func.count()).where(Metric.timestamp >= one_month_ago)
        )
        total_actions = result.scalar()

        # –¶–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–∫–ª–∏–∫, –∞–Ω–∫–µ—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã)
        result = await session.execute(
            select(Metric.event_type).where(
                Metric.timestamp >= one_month_ago,
                Metric.event_type.in_(['form_submit', 'respond_click', 'send_contact'])
            )
        )
        target_actions = result.scalars().all()
        form_count = target_actions.count('form_submit')
        respond_count = target_actions.count('respond_click')
        contact_count = target_actions.count('send_contact')
        total_target = len(target_actions)

        # –£–¥–µ—Ä–∂–∞–Ω–∏–µ
        result = await session.execute(
            select(Metric.user_id, func.count(distinct(func.date(Metric.timestamp))))
            .where(Metric.timestamp >= one_month_ago)
            .group_by(Metric.user_id)
        )
        multi_day_users = [user_id for user_id, days in result.fetchall() if days > 1]
        retention_percent = round(len(multi_day_users) / unique_users * 100, 2) if unique_users else 0

        # –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã
        result = await session.execute(
            select(func.count()).where(
                Metric.timestamp >= one_month_ago,
                Metric.event_type.like('external_click%')
            )
        )
        external_clicks = result.scalar()

    metrics_text = f"""üìä –ú–µ—Ç—Ä–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:

üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {unique_users}
‚ö°Ô∏è –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}

üéØ –¶–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ê–Ω–∫–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {form_count}
‚Ä¢ –û—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {respond_count}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {contact_count}
‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–ª–µ–≤—ã—Ö: {total_target}

üîÅ –£–¥–µ—Ä–∂–∞–Ω–∏–µ:
‚Ä¢ –í–µ—Ä–Ω—É–ª–∏—Å—å —Å–Ω–æ–≤–∞: {len(multi_day_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {retention_percent}%

üåê –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã: {external_clicks}
"""

    await callback.message.edit_text(metrics_text, reply_markup=get_admin_dashboard())


@router.callback_query(F.data == "edit_static_text")
async def choose_content_to_edit(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admin_ids:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    content = load_content()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=value[1], callback_data=f"edit_content_{key}")]
            for key, value in list(content.items())
        ]
    )
    await callback.message.edit_text("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=keyboard)


@router.callback_query(F.data.startswith("edit_content_"))
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
    key = callback.data.replace("edit_content_", "")

    content = load_content()
    key_name = content[key][1]

    await state.update_data(edit_key=key)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{key_name}¬ª")
    await state.set_state(FormStates.waiting_for_new_content)


@router.message(FormStates.waiting_for_new_content)
async def update_content_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    key = data["edit_key"]
    content = load_content()
    content[key][0] = msg.text
    key_name = content[key][1]
    save_content(content)
    await msg.answer(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ ¬´{key_name}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    await asyncio.sleep(2)
    await msg.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_dashboard())
    await state.clear()